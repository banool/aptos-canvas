scalar Address

scalar Any






scalar U128

scalar U16

scalar U256

scalar U32

scalar U64

scalar U8

type _0x1__account__Account {
	authentication_key: [U8!]!
	sequence_number: U64!
	guid_creation_num: U64!
	coin_register_events: _0x1__event__EventHandle!
	key_rotation_events: _0x1__event__EventHandle!
	rotation_capability_offer: _0x1__account__CapabilityOffer!
	signer_capability_offer: _0x1__account__CapabilityOffer!
}

type _0x1__account__CapabilityOffer {
	for: _0x1__option__Option!
}

type _0x1__account__CoinRegisterEvent {
	type_info: _0x1__type_info__TypeInfo!
}

type _0x1__account__KeyRotationEvent {
	old_authentication_key: [U8!]!
	new_authentication_key: [U8!]!
}

type _0x1__account__OriginatingAddress {
	address_map: _0x1__table__Table!
}

type _0x1__account__RotationCapability {
	account: Address!
}

type _0x1__account__RotationCapabilityOfferProofChallenge {
	sequence_number: U64!
	recipient_address: Address!
}

type _0x1__account__RotationCapabilityOfferProofChallengeV2 {
	chain_id: U8!
	sequence_number: U64!
	source_address: Address!
	recipient_address: Address!
}

type _0x1__account__RotationProofChallenge {
	sequence_number: U64!
	originator: Address!
	current_auth_key: Address!
	new_public_key: [U8!]!
}

type _0x1__account__SignerCapability {
	account: Address!
}

type _0x1__account__SignerCapabilityOfferProofChallenge {
	sequence_number: U64!
	recipient_address: Address!
}

type _0x1__account__SignerCapabilityOfferProofChallengeV2 {
	sequence_number: U64!
	source_address: Address!
	recipient_address: Address!
}

type _0x1__acl__ACL {
	list: [Address!]!
}

type _0x1__aggregator__Aggregator {
	handle: Address!
	key: Address!
	limit: U128!
}

type _0x1__aggregator_factory__AggregatorFactory {
	phantom_table: _0x1__table__Table!
}

type _0x1__any__Any {
	type_name: String!
	data: [U8!]!
}

type _0x1__aptos_account__DirectCoinTransferConfigUpdatedEvent {
	new_allow_direct_transfers: Boolean!
}

type _0x1__aptos_account__DirectTransferConfig {
	allow_arbitrary_coin_transfers: Boolean!
	update_coin_transfer_events: _0x1__event__EventHandle!
}

type _0x1__aptos_coin__AptosCoin {
	dummy_field: Boolean!
}

type _0x1__aptos_coin__DelegatedMintCapability {
	to: Address!
}

type _0x1__aptos_coin__Delegations {
	inner: [_0x1__aptos_coin__DelegatedMintCapability!]!
}

type _0x1__aptos_coin__MintCapStore {
	mint_cap: _0x1__coin__MintCapability!
}

type _0x1__aptos_governance__ApprovedExecutionHashes {
	hashes: _0x1__simple_map__SimpleMap!
}

type _0x1__aptos_governance__CreateProposalEvent {
	proposer: Address!
	stake_pool: Address!
	proposal_id: U64!
	execution_hash: [U8!]!
	proposal_metadata: _0x1__simple_map__SimpleMap!
}

type _0x1__aptos_governance__GovernanceConfig {
	min_voting_threshold: U128!
	required_proposer_stake: U64!
	voting_duration_secs: U64!
}

type _0x1__aptos_governance__GovernanceEvents {
	create_proposal_events: _0x1__event__EventHandle!
	update_config_events: _0x1__event__EventHandle!
	vote_events: _0x1__event__EventHandle!
}

type _0x1__aptos_governance__GovernanceResponsbility {
	signer_caps: _0x1__simple_map__SimpleMap!
}

type _0x1__aptos_governance__RecordKey {
	stake_pool: Address!
	proposal_id: U64!
}

type _0x1__aptos_governance__UpdateConfigEvent {
	min_voting_threshold: U128!
	required_proposer_stake: U64!
	voting_duration_secs: U64!
}

type _0x1__aptos_governance__VoteEvent {
	proposal_id: U64!
	voter: Address!
	stake_pool: Address!
	num_votes: U64!
	should_pass: Boolean!
}

type _0x1__aptos_governance__VotingRecords {
	votes: _0x1__table__Table!
}

type _0x1__aptos_governance__VotingRecordsV2 {
	votes: _0x1__smart_table__SmartTable!
}

type _0x1__big_vector__BigVector {
	buckets: _0x1__table_with_length__TableWithLength!
	end_index: U64!
	bucket_size: U64!
}

type _0x1__bit_vector__BitVector {
	length: U64!
	bit_field: [Boolean!]!
}

type _0x1__block__BlockResource {
	height: U64!
	epoch_interval: U64!
	new_block_events: _0x1__event__EventHandle!
	update_epoch_interval_events: _0x1__event__EventHandle!
}

type _0x1__block__NewBlockEvent {
	hash: Address!
	epoch: U64!
	round: U64!
	height: U64!
	previous_block_votes_bitvec: [U8!]!
	proposer: Address!
	failed_proposer_indices: [U64!]!
	time_microseconds: U64!
}

type _0x1__block__UpdateEpochIntervalEvent {
	old_epoch_interval: U64!
	new_epoch_interval: U64!
}

type _0x1__bls12381__AggrOrMultiSignature {
	bytes: [U8!]!
}

type _0x1__bls12381__AggrPublicKeysWithPoP {
	bytes: [U8!]!
}

type _0x1__bls12381__ProofOfPossession {
	bytes: [U8!]!
}

type _0x1__bls12381__PublicKey {
	bytes: [U8!]!
}

type _0x1__bls12381__PublicKeyWithPoP {
	bytes: [U8!]!
}

type _0x1__bls12381__Signature {
	bytes: [U8!]!
}

type _0x1__bls12381_algebra__FormatFq12LscLsb {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatFrLsb {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatFrMsb {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatG1Compr {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatG1Uncompr {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatG2Compr {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatG2Uncompr {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__FormatGt {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__Fq12 {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__Fr {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__G1 {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__G2 {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__Gt {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__HashG1XmdSha256SswuRo {
	dummy_field: Boolean!
}

type _0x1__bls12381_algebra__HashG2XmdSha256SswuRo {
	dummy_field: Boolean!
}

type _0x1__capability__Cap {
	root: Address!
}

type _0x1__capability__CapDelegateState {
	root: Address!
}

type _0x1__capability__CapState {
	delegates: [Address!]!
}

type _0x1__capability__LinearCap {
	root: Address!
}

type _0x1__chain_id__ChainId {
	id: U8!
}

type _0x1__chain_status__GenesisEndMarker {
	dummy_field: Boolean!
}

type _0x1__code__AllowedDep {
	account: Address!
	module_name: String!
}

type _0x1__code__ModuleMetadata {
	name: String!
	source: [U8!]!
	source_map: [U8!]!
	extension: _0x1__option__Option!
}

type _0x1__code__PackageDep {
	account: Address!
	package_name: String!
}

type _0x1__code__PackageMetadata {
	name: String!
	upgrade_policy: _0x1__code__UpgradePolicy!
	upgrade_number: U64!
	source_digest: String!
	manifest: [U8!]!
	modules: [_0x1__code__ModuleMetadata!]!
	deps: [_0x1__code__PackageDep!]!
	extension: _0x1__option__Option!
}

type _0x1__code__PackageRegistry {
	packages: [_0x1__code__PackageMetadata!]!
}

type _0x1__code__UpgradePolicy {
	policy: U8!
}

type _0x1__coin__AggregatableCoin {
	value: _0x1__aggregator__Aggregator!
}

type _0x1__coin__BurnCapability {
	dummy_field: Boolean!
}

type _0x1__coin__Coin {
	value: U64!
}

type _0x1__coin__CoinInfo {
	name: String!
	symbol: String!
	decimals: U8!
	supply: _0x1__option__Option!
}

type _0x1__coin__CoinStore {
	coin: _0x1__coin__Coin!
	frozen: Boolean!
	deposit_events: _0x1__event__EventHandle!
	withdraw_events: _0x1__event__EventHandle!
}

type _0x1__coin__DepositEvent {
	amount: U64!
}

type _0x1__coin__FreezeCapability {
	dummy_field: Boolean!
}

type _0x1__coin__MintCapability {
	dummy_field: Boolean!
}

type _0x1__coin__SupplyConfig {
	allow_upgrades: Boolean!
}

type _0x1__coin__WithdrawEvent {
	amount: U64!
}

type _0x1__comparator__Result {
	inner: U8!
}

type _0x1__consensus_config__ConsensusConfig {
	config: [U8!]!
}

type _0x1__copyable_any__Any {
	type_name: String!
	data: [U8!]!
}

type _0x1__crypto_algebra__Element {
	handle: U64!
}

type _0x1__delegation_pool__AddStakeEvent {
	pool_address: Address!
	delegator_address: Address!
	amount_added: U64!
	add_stake_fee: U64!
}

type _0x1__delegation_pool__CreateProposalEvent {
	proposal_id: U64!
	voter: Address!
	delegation_pool: Address!
}

type _0x1__delegation_pool__DelegateVotingPowerEvent {
	pool_address: Address!
	delegator: Address!
	voter: Address!
}

type _0x1__delegation_pool__DelegatedVotes {
	active_shares: U128!
	pending_inactive_shares: U128!
	active_shares_next_lockup: U128!
	last_locked_until_secs: U64!
}

type _0x1__delegation_pool__DelegationPool {
	active_shares: _0x1__pool_u64_unbound__Pool!
	observed_lockup_cycle: _0x1__delegation_pool__ObservedLockupCycle!
	inactive_shares: _0x1__table__Table!
	pending_withdrawals: _0x1__table__Table!
	stake_pool_signer_cap: _0x1__account__SignerCapability!
	total_coins_inactive: U64!
	operator_commission_percentage: U64!
	add_stake_events: _0x1__event__EventHandle!
	reactivate_stake_events: _0x1__event__EventHandle!
	unlock_stake_events: _0x1__event__EventHandle!
	withdraw_stake_events: _0x1__event__EventHandle!
	distribute_commission_events: _0x1__event__EventHandle!
}

type _0x1__delegation_pool__DelegationPoolOwnership {
	pool_address: Address!
}

type _0x1__delegation_pool__DistributeCommissionEvent {
	pool_address: Address!
	operator: Address!
	commission_active: U64!
	commission_pending_inactive: U64!
}

type _0x1__delegation_pool__GovernanceRecords {
	votes: _0x1__smart_table__SmartTable!
	votes_per_proposal: _0x1__smart_table__SmartTable!
	vote_delegation: _0x1__smart_table__SmartTable!
	delegated_votes: _0x1__smart_table__SmartTable!
	vote_events: _0x1__event__EventHandle!
	create_proposal_events: _0x1__event__EventHandle!
	delegate_voting_power_events: _0x1__event__EventHandle!
}

type _0x1__delegation_pool__ObservedLockupCycle {
	index: U64!
}

type _0x1__delegation_pool__ReactivateStakeEvent {
	pool_address: Address!
	delegator_address: Address!
	amount_reactivated: U64!
}

type _0x1__delegation_pool__UnlockStakeEvent {
	pool_address: Address!
	delegator_address: Address!
	amount_unlocked: U64!
}

type _0x1__delegation_pool__VoteDelegation {
	voter: Address!
	pending_voter: Address!
	last_locked_until_secs: U64!
}

type _0x1__delegation_pool__VoteEvent {
	voter: Address!
	proposal_id: U64!
	delegation_pool: Address!
	num_votes: U64!
	should_pass: Boolean!
}

type _0x1__delegation_pool__VotingRecordKey {
	voter: Address!
	proposal_id: U64!
}

type _0x1__delegation_pool__WithdrawStakeEvent {
	pool_address: Address!
	delegator_address: Address!
	amount_withdrawn: U64!
}

type _0x1__ed25519__Signature {
	bytes: [U8!]!
}

type _0x1__ed25519__SignedMessage {
	type_info: _0x1__type_info__TypeInfo!
	inner: Any!
}

type _0x1__ed25519__UnvalidatedPublicKey {
	bytes: [U8!]!
}

type _0x1__ed25519__ValidatedPublicKey {
	bytes: [U8!]!
}

type _0x1__event__EventHandle {
	counter: U64!
	guid: _0x1__guid__GUID!
}

type _0x1__execution_config__ExecutionConfig {
	config: [U8!]!
}

type _0x1__features__Features {
	features: [U8!]!
}

type _0x1__fixed_point32__FixedPoint32 {
	value: U64!
}

type _0x1__fixed_point64__FixedPoint64 {
	value: U128!
}

type _0x1__fungible_asset__BurnRef {
	metadata: _0x1__object__Object!
}

type _0x1__fungible_asset__DepositEvent {
	amount: U64!
}

type _0x1__fungible_asset__FrozenEvent {
	frozen: Boolean!
}

type _0x1__fungible_asset__FungibleAsset {
	metadata: _0x1__object__Object!
	amount: U64!
}

type _0x1__fungible_asset__FungibleAssetEvents {
	deposit_events: _0x1__event__EventHandle!
	withdraw_events: _0x1__event__EventHandle!
	frozen_events: _0x1__event__EventHandle!
}

type _0x1__fungible_asset__FungibleStore {
	metadata: _0x1__object__Object!
	balance: U64!
	frozen: Boolean!
}

type _0x1__fungible_asset__Metadata {
	name: String!
	symbol: String!
	decimals: U8!
	icon_uri: String!
	project_uri: String!
}

type _0x1__fungible_asset__MintRef {
	metadata: _0x1__object__Object!
}

type _0x1__fungible_asset__Supply {
	current: U128!
	maximum: _0x1__option__Option!
}

type _0x1__fungible_asset__TransferRef {
	metadata: _0x1__object__Object!
}

type _0x1__fungible_asset__WithdrawEvent {
	amount: U64!
}

type _0x1__gas_schedule__GasEntry {
	key: String!
	val: U64!
}

type _0x1__gas_schedule__GasSchedule {
	entries: [_0x1__gas_schedule__GasEntry!]!
}

type _0x1__gas_schedule__GasScheduleV2 {
	feature_version: U64!
	entries: [_0x1__gas_schedule__GasEntry!]!
}

type _0x1__genesis__AccountMap {
	account_address: Address!
	balance: U64!
}

type _0x1__genesis__EmployeeAccountMap {
	accounts: [Address!]!
	validator: _0x1__genesis__ValidatorConfigurationWithCommission!
	vesting_schedule_numerator: [U64!]!
	vesting_schedule_denominator: U64!
	beneficiary_resetter: Address!
}

type _0x1__genesis__ValidatorConfiguration {
	owner_address: Address!
	operator_address: Address!
	voter_address: Address!
	stake_amount: U64!
	consensus_pubkey: [U8!]!
	proof_of_possession: [U8!]!
	network_addresses: [U8!]!
	full_node_network_addresses: [U8!]!
}

type _0x1__genesis__ValidatorConfigurationWithCommission {
	validator_config: _0x1__genesis__ValidatorConfiguration!
	commission_percentage: U64!
	join_during_genesis: Boolean!
}

type _0x1__governance_proposal__GovernanceProposal {
	dummy_field: Boolean!
}

type _0x1__guid__GUID {
	id: _0x1__guid__ID!
}

type _0x1__guid__ID {
	creation_num: U64!
	addr: Address!
}

type _0x1__managed_coin__Capabilities {
	burn_cap: _0x1__coin__BurnCapability!
	freeze_cap: _0x1__coin__FreezeCapability!
	mint_cap: _0x1__coin__MintCapability!
}

type _0x1__multi_ed25519__Signature {
	bytes: [U8!]!
}

type _0x1__multi_ed25519__UnvalidatedPublicKey {
	bytes: [U8!]!
}

type _0x1__multi_ed25519__ValidatedPublicKey {
	bytes: [U8!]!
}

type _0x1__multisig_account__AddOwnersEvent {
	owners_added: [Address!]!
}

type _0x1__multisig_account__CreateTransactionEvent {
	creator: Address!
	sequence_number: U64!
	transaction: _0x1__multisig_account__MultisigTransaction!
}

type _0x1__multisig_account__ExecuteRejectedTransactionEvent {
	sequence_number: U64!
	num_rejections: U64!
	executor: Address!
}

type _0x1__multisig_account__ExecutionError {
	abort_location: String!
	error_type: String!
	error_code: U64!
}

type _0x1__multisig_account__MetadataUpdatedEvent {
	old_metadata: _0x1__simple_map__SimpleMap!
	new_metadata: _0x1__simple_map__SimpleMap!
}

type _0x1__multisig_account__MultisigAccount {
	owners: [Address!]!
	num_signatures_required: U64!
	transactions: _0x1__table__Table!
	last_executed_sequence_number: U64!
	next_sequence_number: U64!
	signer_cap: _0x1__option__Option!
	metadata: _0x1__simple_map__SimpleMap!
	add_owners_events: _0x1__event__EventHandle!
	remove_owners_events: _0x1__event__EventHandle!
	update_signature_required_events: _0x1__event__EventHandle!
	create_transaction_events: _0x1__event__EventHandle!
	vote_events: _0x1__event__EventHandle!
	execute_rejected_transaction_events: _0x1__event__EventHandle!
	execute_transaction_events: _0x1__event__EventHandle!
	transaction_execution_failed_events: _0x1__event__EventHandle!
	metadata_updated_events: _0x1__event__EventHandle!
}

type _0x1__multisig_account__MultisigAccountCreationMessage {
	chain_id: U8!
	account_address: Address!
	sequence_number: U64!
	owners: [Address!]!
	num_signatures_required: U64!
}

type _0x1__multisig_account__MultisigAccountCreationWithAuthKeyRevocationMessage {
	chain_id: U8!
	account_address: Address!
	sequence_number: U64!
	owners: [Address!]!
	num_signatures_required: U64!
}

type _0x1__multisig_account__MultisigTransaction {
	payload: _0x1__option__Option!
	payload_hash: _0x1__option__Option!
	votes: _0x1__simple_map__SimpleMap!
	creator: Address!
	creation_time_secs: U64!
}

type _0x1__multisig_account__RemoveOwnersEvent {
	owners_removed: [Address!]!
}

type _0x1__multisig_account__TransactionExecutionFailedEvent {
	executor: Address!
	sequence_number: U64!
	transaction_payload: [U8!]!
	num_approvals: U64!
	execution_error: _0x1__multisig_account__ExecutionError!
}

type _0x1__multisig_account__TransactionExecutionSucceededEvent {
	executor: Address!
	sequence_number: U64!
	transaction_payload: [U8!]!
	num_approvals: U64!
}

type _0x1__multisig_account__UpdateSignaturesRequiredEvent {
	old_num_signatures_required: U64!
	new_num_signatures_required: U64!
}

type _0x1__multisig_account__VoteEvent {
	owner: Address!
	sequence_number: U64!
	approved: Boolean!
}

type _0x1__object__ConstructorRef {
	self: Address!
	can_delete: Boolean!
}

type _0x1__object__DeleteRef {
	self: Address!
}

type _0x1__object__DeriveRef {
	self: Address!
}

type _0x1__object__ExtendRef {
	self: Address!
}

type _0x1__object__LinearTransferRef {
	self: Address!
	owner: Address!
}

type _0x1__object__Object {
	inner: Address!
}

type _0x1__object__ObjectCore {
	guid_creation_num: U64!
	owner: Address!
	allow_ungated_transfer: Boolean!
	transfer_events: _0x1__event__EventHandle!
}

type _0x1__object__ObjectGroup {
	dummy_field: Boolean!
}

type _0x1__object__TransferEvent {
	object: Address!
	from: Address!
	to: Address!
}

type _0x1__object__TransferRef {
	self: Address!
}

type _0x1__option__Option {
	vec: [Any!]!
}

type _0x1__optional_aggregator__Integer {
	value: U128!
	limit: U128!
}

type _0x1__optional_aggregator__OptionalAggregator {
	aggregator: _0x1__option__Option!
	integer: _0x1__option__Option!
}

type _0x1__pool_u64__Pool {
	shareholders_limit: U64!
	total_coins: U64!
	total_shares: U64!
	shares: _0x1__simple_map__SimpleMap!
	shareholders: [Address!]!
	scaling_factor: U64!
}

type _0x1__pool_u64_unbound__Pool {
	total_coins: U64!
	total_shares: U128!
	shares: _0x1__table_with_length__TableWithLength!
	scaling_factor: U64!
}

type _0x1__primary_fungible_store__DeriveRefPod {
	metadata_derive_ref: _0x1__object__DeriveRef!
}

type _0x1__reconfiguration__Configuration {
	epoch: U64!
	last_reconfiguration_time: U64!
	events: _0x1__event__EventHandle!
}

type _0x1__reconfiguration__DisableReconfiguration {
	dummy_field: Boolean!
}

type _0x1__reconfiguration__NewEpochEvent {
	epoch: U64!
}

type _0x1__resource_account__Container {
	store: _0x1__simple_map__SimpleMap!
}

type _0x1__ristretto255__CompressedRistretto {
	data: [U8!]!
}

type _0x1__ristretto255__RistrettoPoint {
	handle: U64!
}

type _0x1__ristretto255__Scalar {
	data: [U8!]!
}

type _0x1__ristretto255_bulletproofs__RangeProof {
	bytes: [U8!]!
}

type _0x1__ristretto255_elgamal__Ciphertext {
	left: _0x1__ristretto255__RistrettoPoint!
	right: _0x1__ristretto255__RistrettoPoint!
}

type _0x1__ristretto255_elgamal__CompressedCiphertext {
	left: _0x1__ristretto255__CompressedRistretto!
	right: _0x1__ristretto255__CompressedRistretto!
}

type _0x1__ristretto255_elgamal__CompressedPubkey {
	point: _0x1__ristretto255__CompressedRistretto!
}

type _0x1__ristretto255_pedersen__Commitment {
	point: _0x1__ristretto255__RistrettoPoint!
}

type _0x1__secp256k1__ECDSARawPublicKey {
	bytes: [U8!]!
}

type _0x1__secp256k1__ECDSASignature {
	bytes: [U8!]!
}

type _0x1__simple_map__Element {
	key: Any!
	value: Any!
}

type _0x1__simple_map__SimpleMap {
	data: [_0x1__simple_map__Element!]!
}

type _0x1__smart_table__Entry {
	hash: U64!
	key: Any!
	value: Any!
}

type _0x1__smart_table__SmartTable {
	buckets: _0x1__table_with_length__TableWithLength!
	num_buckets: U64!
	level: U8!
	size: U64!
	split_load_threshold: U8!
	target_bucket_size: U64!
}

type _0x1__smart_vector__SmartVector {
	inline_vec: [Any!]!
	big_vec: _0x1__option__Option!
	inline_capacity: _0x1__option__Option!
	bucket_size: _0x1__option__Option!
}

type _0x1__stake__AddStakeEvent {
	pool_address: Address!
	amount_added: U64!
}

type _0x1__stake__AllowedValidators {
	accounts: [Address!]!
}

type _0x1__stake__AptosCoinCapabilities {
	mint_cap: _0x1__coin__MintCapability!
}

type _0x1__stake__DistributeRewardsEvent {
	pool_address: Address!
	rewards_amount: U64!
}

type _0x1__stake__IncreaseLockupEvent {
	pool_address: Address!
	old_locked_until_secs: U64!
	new_locked_until_secs: U64!
}

type _0x1__stake__IndividualValidatorPerformance {
	successful_proposals: U64!
	failed_proposals: U64!
}

type _0x1__stake__JoinValidatorSetEvent {
	pool_address: Address!
}

type _0x1__stake__LeaveValidatorSetEvent {
	pool_address: Address!
}

type _0x1__stake__OwnerCapability {
	pool_address: Address!
}

type _0x1__stake__ReactivateStakeEvent {
	pool_address: Address!
	amount: U64!
}

type _0x1__stake__RegisterValidatorCandidateEvent {
	pool_address: Address!
}

type _0x1__stake__RotateConsensusKeyEvent {
	pool_address: Address!
	old_consensus_pubkey: [U8!]!
	new_consensus_pubkey: [U8!]!
}

type _0x1__stake__SetOperatorEvent {
	pool_address: Address!
	old_operator: Address!
	new_operator: Address!
}

type _0x1__stake__StakePool {
	active: _0x1__coin__Coin!
	inactive: _0x1__coin__Coin!
	pending_active: _0x1__coin__Coin!
	pending_inactive: _0x1__coin__Coin!
	locked_until_secs: U64!
	operator_address: Address!
	delegated_voter: Address!
	initialize_validator_events: _0x1__event__EventHandle!
	set_operator_events: _0x1__event__EventHandle!
	add_stake_events: _0x1__event__EventHandle!
	reactivate_stake_events: _0x1__event__EventHandle!
	rotate_consensus_key_events: _0x1__event__EventHandle!
	update_network_and_fullnode_addresses_events: _0x1__event__EventHandle!
	increase_lockup_events: _0x1__event__EventHandle!
	join_validator_set_events: _0x1__event__EventHandle!
	distribute_rewards_events: _0x1__event__EventHandle!
	unlock_stake_events: _0x1__event__EventHandle!
	withdraw_stake_events: _0x1__event__EventHandle!
	leave_validator_set_events: _0x1__event__EventHandle!
}

type _0x1__stake__UnlockStakeEvent {
	pool_address: Address!
	amount_unlocked: U64!
}

type _0x1__stake__UpdateNetworkAndFullnodeAddressesEvent {
	pool_address: Address!
	old_network_addresses: [U8!]!
	new_network_addresses: [U8!]!
	old_fullnode_addresses: [U8!]!
	new_fullnode_addresses: [U8!]!
}

type _0x1__stake__ValidatorConfig {
	consensus_pubkey: [U8!]!
	network_addresses: [U8!]!
	fullnode_addresses: [U8!]!
	validator_index: U64!
}

type _0x1__stake__ValidatorFees {
	fees_table: _0x1__table__Table!
}

type _0x1__stake__ValidatorInfo {
	addr: Address!
	voting_power: U64!
	config: _0x1__stake__ValidatorConfig!
}

type _0x1__stake__ValidatorPerformance {
	validators: [_0x1__stake__IndividualValidatorPerformance!]!
}

type _0x1__stake__ValidatorSet {
	consensus_scheme: U8!
	active_validators: [_0x1__stake__ValidatorInfo!]!
	pending_inactive: [_0x1__stake__ValidatorInfo!]!
	pending_active: [_0x1__stake__ValidatorInfo!]!
	total_voting_power: U128!
	total_joining_power: U128!
}

type _0x1__stake__WithdrawStakeEvent {
	pool_address: Address!
	amount_withdrawn: U64!
}

type _0x1__staking_config__StakingConfig {
	minimum_stake: U64!
	maximum_stake: U64!
	recurring_lockup_duration_secs: U64!
	allow_validator_set_change: Boolean!
	rewards_rate: U64!
	rewards_rate_denominator: U64!
	voting_power_increase_limit: U64!
}

type _0x1__staking_config__StakingRewardsConfig {
	rewards_rate: _0x1__fixed_point64__FixedPoint64!
	min_rewards_rate: _0x1__fixed_point64__FixedPoint64!
	rewards_rate_period_in_secs: U64!
	last_rewards_rate_period_start_in_secs: U64!
	rewards_rate_decrease_rate: _0x1__fixed_point64__FixedPoint64!
}

type _0x1__staking_contract__AddDistributionEvent {
	operator: Address!
	pool_address: Address!
	amount: U64!
}

type _0x1__staking_contract__AddStakeEvent {
	operator: Address!
	pool_address: Address!
	amount: U64!
}

type _0x1__staking_contract__CreateStakingContractEvent {
	operator: Address!
	voter: Address!
	pool_address: Address!
	principal: U64!
	commission_percentage: U64!
}

type _0x1__staking_contract__DistributeEvent {
	operator: Address!
	pool_address: Address!
	recipient: Address!
	amount: U64!
}

type _0x1__staking_contract__RequestCommissionEvent {
	operator: Address!
	pool_address: Address!
	accumulated_rewards: U64!
	commission_amount: U64!
}

type _0x1__staking_contract__ResetLockupEvent {
	operator: Address!
	pool_address: Address!
}

type _0x1__staking_contract__StakingContract {
	principal: U64!
	pool_address: Address!
	owner_cap: _0x1__stake__OwnerCapability!
	commission_percentage: U64!
	distribution_pool: _0x1__pool_u64__Pool!
	signer_cap: _0x1__account__SignerCapability!
}

type _0x1__staking_contract__StakingGroupContainer {
	dummy_field: Boolean!
}

type _0x1__staking_contract__StakingGroupUpdateCommissionEvent {
	update_commission_events: _0x1__event__EventHandle!
}

type _0x1__staking_contract__Store {
	staking_contracts: _0x1__simple_map__SimpleMap!
	create_staking_contract_events: _0x1__event__EventHandle!
	update_voter_events: _0x1__event__EventHandle!
	reset_lockup_events: _0x1__event__EventHandle!
	add_stake_events: _0x1__event__EventHandle!
	request_commission_events: _0x1__event__EventHandle!
	unlock_stake_events: _0x1__event__EventHandle!
	switch_operator_events: _0x1__event__EventHandle!
	add_distribution_events: _0x1__event__EventHandle!
	distribute_events: _0x1__event__EventHandle!
}

type _0x1__staking_contract__SwitchOperatorEvent {
	old_operator: Address!
	new_operator: Address!
	pool_address: Address!
}

type _0x1__staking_contract__UnlockStakeEvent {
	operator: Address!
	pool_address: Address!
	amount: U64!
	commission_paid: U64!
}

type _0x1__staking_contract__UpdateCommissionEvent {
	staker: Address!
	operator: Address!
	old_commission_percentage: U64!
	new_commission_percentage: U64!
}

type _0x1__staking_contract__UpdateVoterEvent {
	operator: Address!
	pool_address: Address!
	old_voter: Address!
	new_voter: Address!
}

type _0x1__state_storage__GasParameter {
	usage: _0x1__state_storage__Usage!
}

type _0x1__state_storage__StateStorageUsage {
	epoch: U64!
	usage: _0x1__state_storage__Usage!
}

type _0x1__state_storage__Usage {
	items: U64!
	bytes: U64!
}

type _0x1__storage_gas__GasCurve {
	min_gas: U64!
	max_gas: U64!
	points: [_0x1__storage_gas__Point!]!
}

type _0x1__storage_gas__Point {
	x: U64!
	y: U64!
}

type _0x1__storage_gas__StorageGas {
	per_item_read: U64!
	per_item_create: U64!
	per_item_write: U64!
	per_byte_read: U64!
	per_byte_create: U64!
	per_byte_write: U64!
}

type _0x1__storage_gas__StorageGasConfig {
	item_config: _0x1__storage_gas__UsageGasConfig!
	byte_config: _0x1__storage_gas__UsageGasConfig!
}

type _0x1__storage_gas__UsageGasConfig {
	target_usage: U64!
	read_curve: _0x1__storage_gas__GasCurve!
	create_curve: _0x1__storage_gas__GasCurve!
	write_curve: _0x1__storage_gas__GasCurve!
}

type _0x1__string__String {
	bytes: [U8!]!
}

type _0x1__string_utils__Cons {
	car: Any!
	cdr: Any!
}

type _0x1__string_utils__FakeCons {
	car: Any!
	cdr: Any!
}

type _0x1__string_utils__NIL {
	dummy_field: Boolean!
}

type _0x1__table__Box {
	val: Any!
}

type _0x1__table__Table {
	handle: Address!
}

type _0x1__table_with_length__TableWithLength {
	inner: _0x1__table__Table!
	length: U64!
}

type _0x1__timestamp__CurrentTimeMicroseconds {
	microseconds: U64!
}

type _0x1__transaction_context__AUID {
	unique_address: Address!
}

type _0x1__transaction_fee__AptosCoinCapabilities {
	burn_cap: _0x1__coin__BurnCapability!
}

type _0x1__transaction_fee__CollectedFeesPerBlock {
	amount: _0x1__coin__AggregatableCoin!
	proposer: _0x1__option__Option!
	burn_percentage: U8!
}

type _0x1__transaction_validation__TransactionValidation {
	module_addr: Address!
	module_name: [U8!]!
	script_prologue_name: [U8!]!
	module_prologue_name: [U8!]!
	multi_agent_prologue_name: [U8!]!
	user_epilogue_name: [U8!]!
}

type _0x1__type_info__TypeInfo {
	account_address: Address!
	module_name: [U8!]!
	struct_name: [U8!]!
}

type _0x1__version__SetVersionCapability {
	dummy_field: Boolean!
}

type _0x1__version__Version {
	major: U64!
}

type _0x1__vesting__AdminStore {
	vesting_contracts: [Address!]!
	nonce: U64!
	create_events: _0x1__event__EventHandle!
}

type _0x1__vesting__AdminWithdrawEvent {
	admin: Address!
	vesting_contract_address: Address!
	amount: U64!
}

type _0x1__vesting__CreateVestingContractEvent {
	operator: Address!
	voter: Address!
	grant_amount: U64!
	withdrawal_address: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	commission_percentage: U64!
}

type _0x1__vesting__DistributeEvent {
	admin: Address!
	vesting_contract_address: Address!
	amount: U64!
}

type _0x1__vesting__ResetLockupEvent {
	admin: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	new_lockup_expiration_secs: U64!
}

type _0x1__vesting__SetBeneficiaryEvent {
	admin: Address!
	vesting_contract_address: Address!
	shareholder: Address!
	old_beneficiary: Address!
	new_beneficiary: Address!
}

type _0x1__vesting__StakingInfo {
	pool_address: Address!
	operator: Address!
	voter: Address!
	commission_percentage: U64!
}

type _0x1__vesting__TerminateEvent {
	admin: Address!
	vesting_contract_address: Address!
}

type _0x1__vesting__UnlockRewardsEvent {
	admin: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	amount: U64!
}

type _0x1__vesting__UpdateOperatorEvent {
	admin: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	old_operator: Address!
	new_operator: Address!
	commission_percentage: U64!
}

type _0x1__vesting__UpdateVoterEvent {
	admin: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	old_voter: Address!
	new_voter: Address!
}

type _0x1__vesting__VestEvent {
	admin: Address!
	vesting_contract_address: Address!
	staking_pool_address: Address!
	period_vested: U64!
	amount: U64!
}

type _0x1__vesting__VestingAccountManagement {
	roles: _0x1__simple_map__SimpleMap!
}

type _0x1__vesting__VestingContract {
	state: U64!
	admin: Address!
	grant_pool: _0x1__pool_u64__Pool!
	beneficiaries: _0x1__simple_map__SimpleMap!
	vesting_schedule: _0x1__vesting__VestingSchedule!
	withdrawal_address: Address!
	staking: _0x1__vesting__StakingInfo!
	remaining_grant: U64!
	signer_cap: _0x1__account__SignerCapability!
	update_operator_events: _0x1__event__EventHandle!
	update_voter_events: _0x1__event__EventHandle!
	reset_lockup_events: _0x1__event__EventHandle!
	set_beneficiary_events: _0x1__event__EventHandle!
	unlock_rewards_events: _0x1__event__EventHandle!
	vest_events: _0x1__event__EventHandle!
	distribute_events: _0x1__event__EventHandle!
	terminate_events: _0x1__event__EventHandle!
	admin_withdraw_events: _0x1__event__EventHandle!
}

type _0x1__vesting__VestingSchedule {
	schedule: [_0x1__fixed_point32__FixedPoint32!]!
	start_timestamp_secs: U64!
	period_duration: U64!
	last_vested_period: U64!
}

type _0x1__voting__CreateProposalEvent {
	proposal_id: U64!
	early_resolution_vote_threshold: _0x1__option__Option!
	execution_hash: [U8!]!
	expiration_secs: U64!
	metadata: _0x1__simple_map__SimpleMap!
	min_vote_threshold: U128!
}

type _0x1__voting__Proposal {
	proposer: Address!
	execution_content: _0x1__option__Option!
	metadata: _0x1__simple_map__SimpleMap!
	creation_time_secs: U64!
	execution_hash: [U8!]!
	min_vote_threshold: U128!
	expiration_secs: U64!
	early_resolution_vote_threshold: _0x1__option__Option!
	yes_votes: U128!
	no_votes: U128!
	is_resolved: Boolean!
	resolution_time_secs: U64!
}

type _0x1__voting__RegisterForumEvent {
	hosting_account: Address!
	proposal_type_info: _0x1__type_info__TypeInfo!
}

type _0x1__voting__ResolveProposal {
	proposal_id: U64!
	yes_votes: U128!
	no_votes: U128!
	resolved_early: Boolean!
}

type _0x1__voting__VoteEvent {
	proposal_id: U64!
	num_votes: U64!
}

type _0x1__voting__VotingEvents {
	create_proposal_events: _0x1__event__EventHandle!
	register_forum_events: _0x1__event__EventHandle!
	resolve_proposal_events: _0x1__event__EventHandle!
	vote_events: _0x1__event__EventHandle!
}

type _0x1__voting__VotingForum {
	proposals: _0x1__table__Table!
	events: _0x1__voting__VotingEvents!
	next_proposal_id: U64!
}

type _0x3__canvas_collection__CollectionRefs {
	transfer_ref: _0x1__object__TransferRef!
	mutator_ref: _0x4__collection__MutatorRef!
}

type _0x3__canvas_token__Canvas {
	config: _0x3__canvas_token__CanvasConfig!
	pixels: _0x1__smart_table__SmartTable!
	last_contribution_s: _0x1__smart_table__SmartTable!
	allowlisted_artists: _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet!
	blocklisted_artists: _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet!
	admins: _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet!
	created_at_s: U64!
	extend_ref: _0x1__object__ExtendRef!
	mutator_ref: _0x4__token__MutatorRef!
}

type _0x3__canvas_token__CanvasConfig {
	width: U64!
	height: U64!
	per_account_timeout_s: U64!
	can_draw_for_s: U64!
	palette: [_0x3__canvas_token__Color!]!
	cost: U64!
	funds_recipient: _0x1__option__Option!
	default_color: _0x3__canvas_token__Color!
	owner_is_super_admin: Boolean!
}

type _0x3__canvas_token__Color {
	r: U8!
	g: U8!
	b: U8!
}

type _0x4__aptos_token__AptosCollection {
	mutator_ref: _0x1__option__Option!
	royalty_mutator_ref: _0x1__option__Option!
	mutable_description: Boolean!
	mutable_uri: Boolean!
	mutable_token_description: Boolean!
	mutable_token_name: Boolean!
	mutable_token_properties: Boolean!
	mutable_token_uri: Boolean!
	tokens_burnable_by_creator: Boolean!
	tokens_freezable_by_creator: Boolean!
}

type _0x4__aptos_token__AptosToken {
	burn_ref: _0x1__option__Option!
	transfer_ref: _0x1__option__Option!
	mutator_ref: _0x1__option__Option!
	property_mutator_ref: _0x4__property_map__MutatorRef!
}

type _0x4__collection__BurnEvent {
	index: U64!
	token: Address!
}

type _0x4__collection__Collection {
	creator: Address!
	description: String!
	name: String!
	uri: String!
	mutation_events: _0x1__event__EventHandle!
}

type _0x4__collection__FixedSupply {
	current_supply: U64!
	max_supply: U64!
	total_minted: U64!
	burn_events: _0x1__event__EventHandle!
	mint_events: _0x1__event__EventHandle!
}

type _0x4__collection__MintEvent {
	index: U64!
	token: Address!
}

type _0x4__collection__MutationEvent {
	mutated_field_name: String!
}

type _0x4__collection__MutatorRef {
	self: Address!
}

type _0x4__collection__UnlimitedSupply {
	current_supply: U64!
	total_minted: U64!
	burn_events: _0x1__event__EventHandle!
	mint_events: _0x1__event__EventHandle!
}

type _0x4__property_map__MutatorRef {
	self: Address!
}

type _0x4__property_map__PropertyMap {
	inner: _0x1__simple_map__SimpleMap!
}

type _0x4__property_map__PropertyValue {
	type: U8!
	value: [U8!]!
}

type _0x4__royalty__MutatorRef {
	inner: _0x1__object__ExtendRef!
}

type _0x4__royalty__Royalty {
	numerator: U64!
	denominator: U64!
	payee_address: Address!
}

type _0x4__token__BurnRef {
	inner: _0x1__option__Option!
	self: _0x1__option__Option!
}

type _0x4__token__MutationEvent {
	mutated_field_name: String!
	old_value: String!
	new_value: String!
}

type _0x4__token__MutatorRef {
	self: Address!
}

type _0x4__token__Token {
	collection: _0x1__object__Object!
	index: U64!
	description: String!
	name: String!
	uri: String!
	mutation_events: _0x1__event__EventHandle!
}

type _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element {
	key: Any!
	value: Any!
}

type _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__SimpleMap {
	data: [_0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element!]!
}

type _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet {
	data: [Any!]!
}
