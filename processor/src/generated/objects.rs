// DO NOT EDIT THIS FILE
// This file was generated by https://github.com/tacogips/async-graphql-reverse
use aptos_move_graphql_scalars::*;
use serde::{Deserialize, Serialize};
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__Account {
    pub authentication_key: Vec<U8>,
    pub sequence_number: U64,
    pub guid_creation_num: U64,
    pub coin_register_events: _0x1__event__EventHandle,
    pub key_rotation_events: _0x1__event__EventHandle,
    pub rotation_capability_offer: _0x1__account__CapabilityOffer,
    pub signer_capability_offer: _0x1__account__CapabilityOffer,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__CapabilityOffer {
    pub r#for: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__CoinRegisterEvent {
    pub type_info: _0x1__type_info__TypeInfo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__KeyRotationEvent {
    pub old_authentication_key: Vec<U8>,
    pub new_authentication_key: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__OriginatingAddress {
    pub address_map: _0x1__table__Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__RotationCapability {
    pub account: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__RotationCapabilityOfferProofChallenge {
    pub sequence_number: U64,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__RotationCapabilityOfferProofChallengeV2 {
    pub chain_id: U8,
    pub sequence_number: U64,
    pub source_address: Address,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__RotationProofChallenge {
    pub sequence_number: U64,
    pub originator: Address,
    pub current_auth_key: Address,
    pub new_public_key: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__SignerCapability {
    pub account: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__SignerCapabilityOfferProofChallenge {
    pub sequence_number: U64,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__account__SignerCapabilityOfferProofChallengeV2 {
    pub sequence_number: U64,
    pub source_address: Address,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__acl__ACL {
    pub list: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aggregator__Aggregator {
    pub handle: Address,
    pub key: Address,
    pub limit: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aggregator_factory__AggregatorFactory {
    pub phantom_table: _0x1__table__Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__any__Any {
    pub type_name: String,
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_account__DirectCoinTransferConfigUpdatedEvent {
    pub new_allow_direct_transfers: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_account__DirectTransferConfig {
    pub allow_arbitrary_coin_transfers: bool,
    pub update_coin_transfer_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_coin__AptosCoin {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_coin__DelegatedMintCapability {
    pub to: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_coin__Delegations {
    pub inner: Vec<_0x1__aptos_coin__DelegatedMintCapability>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_coin__MintCapStore {
    pub mint_cap: _0x1__coin__MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__ApprovedExecutionHashes {
    pub hashes: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__CreateProposalEvent {
    pub proposer: Address,
    pub stake_pool: Address,
    pub proposal_id: U64,
    pub execution_hash: Vec<U8>,
    pub proposal_metadata: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__GovernanceConfig {
    pub min_voting_threshold: U128,
    pub required_proposer_stake: U64,
    pub voting_duration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__GovernanceEvents {
    pub create_proposal_events: _0x1__event__EventHandle,
    pub update_config_events: _0x1__event__EventHandle,
    pub vote_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__GovernanceResponsbility {
    pub signer_caps: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__RecordKey {
    pub stake_pool: Address,
    pub proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__UpdateConfigEvent {
    pub min_voting_threshold: U128,
    pub required_proposer_stake: U64,
    pub voting_duration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__VoteEvent {
    pub proposal_id: U64,
    pub voter: Address,
    pub stake_pool: Address,
    pub num_votes: U64,
    pub should_pass: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__VotingRecords {
    pub votes: _0x1__table__Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__aptos_governance__VotingRecordsV2 {
    pub votes: _0x1__smart_table__SmartTable,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__big_vector__BigVector {
    pub buckets: _0x1__table_with_length__TableWithLength,
    pub end_index: U64,
    pub bucket_size: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bit_vector__BitVector {
    pub length: U64,
    pub bit_field: Vec<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__block__BlockResource {
    pub height: U64,
    pub epoch_interval: U64,
    pub new_block_events: _0x1__event__EventHandle,
    pub update_epoch_interval_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__block__NewBlockEvent {
    pub hash: Address,
    pub epoch: U64,
    pub round: U64,
    pub height: U64,
    pub previous_block_votes_bitvec: Vec<U8>,
    pub proposer: Address,
    pub failed_proposer_indices: Vec<U64>,
    pub time_microseconds: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__block__UpdateEpochIntervalEvent {
    pub old_epoch_interval: U64,
    pub new_epoch_interval: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__AggrOrMultiSignature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__AggrPublicKeysWithPoP {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__ProofOfPossession {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__PublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__PublicKeyWithPoP {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381__Signature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatFq12LscLsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatFrLsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatFrMsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatG1Compr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatG1Uncompr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatG2Compr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatG2Uncompr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__FormatGt {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__Fq12 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__Fr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__G1 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__G2 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__Gt {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__HashG1XmdSha256SswuRo {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__bls12381_algebra__HashG2XmdSha256SswuRo {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__capability__Cap {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__capability__CapDelegateState {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__capability__CapState {
    pub delegates: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__capability__LinearCap {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__chain_id__ChainId {
    pub id: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__chain_status__GenesisEndMarker {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__AllowedDep {
    pub account: Address,
    pub module_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__ModuleMetadata {
    pub name: String,
    pub source: Vec<U8>,
    pub source_map: Vec<U8>,
    pub extension: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__PackageDep {
    pub account: Address,
    pub package_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__PackageMetadata {
    pub name: String,
    pub upgrade_policy: _0x1__code__UpgradePolicy,
    pub upgrade_number: U64,
    pub source_digest: String,
    pub manifest: Vec<U8>,
    pub modules: Vec<_0x1__code__ModuleMetadata>,
    pub deps: Vec<_0x1__code__PackageDep>,
    pub extension: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__PackageRegistry {
    pub packages: Vec<_0x1__code__PackageMetadata>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__code__UpgradePolicy {
    pub policy: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__AggregatableCoin {
    pub value: _0x1__aggregator__Aggregator,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__BurnCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__Coin {
    pub value: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__CoinInfo {
    pub name: String,
    pub symbol: String,
    pub decimals: U8,
    pub supply: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__CoinStore {
    pub coin: _0x1__coin__Coin,
    pub frozen: bool,
    pub deposit_events: _0x1__event__EventHandle,
    pub withdraw_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__DepositEvent {
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__FreezeCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__MintCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__SupplyConfig {
    pub allow_upgrades: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__coin__WithdrawEvent {
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__comparator__Result {
    pub inner: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__consensus_config__ConsensusConfig {
    pub config: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__copyable_any__Any {
    pub type_name: String,
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__crypto_algebra__Element {
    pub handle: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__AddStakeEvent {
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_added: U64,
    pub add_stake_fee: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__CreateProposalEvent {
    pub proposal_id: U64,
    pub voter: Address,
    pub delegation_pool: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__DelegateVotingPowerEvent {
    pub pool_address: Address,
    pub delegator: Address,
    pub voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__DelegatedVotes {
    pub active_shares: U128,
    pub pending_inactive_shares: U128,
    pub active_shares_next_lockup: U128,
    pub last_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__DelegationPool {
    pub active_shares: _0x1__pool_u64_unbound__Pool,
    pub observed_lockup_cycle: _0x1__delegation_pool__ObservedLockupCycle,
    pub inactive_shares: _0x1__table__Table,
    pub pending_withdrawals: _0x1__table__Table,
    pub stake_pool_signer_cap: _0x1__account__SignerCapability,
    pub total_coins_inactive: U64,
    pub operator_commission_percentage: U64,
    pub add_stake_events: _0x1__event__EventHandle,
    pub reactivate_stake_events: _0x1__event__EventHandle,
    pub unlock_stake_events: _0x1__event__EventHandle,
    pub withdraw_stake_events: _0x1__event__EventHandle,
    pub distribute_commission_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__DelegationPoolOwnership {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__DistributeCommissionEvent {
    pub pool_address: Address,
    pub operator: Address,
    pub commission_active: U64,
    pub commission_pending_inactive: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__GovernanceRecords {
    pub votes: _0x1__smart_table__SmartTable,
    pub votes_per_proposal: _0x1__smart_table__SmartTable,
    pub vote_delegation: _0x1__smart_table__SmartTable,
    pub delegated_votes: _0x1__smart_table__SmartTable,
    pub vote_events: _0x1__event__EventHandle,
    pub create_proposal_events: _0x1__event__EventHandle,
    pub delegate_voting_power_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__ObservedLockupCycle {
    pub index: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__ReactivateStakeEvent {
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_reactivated: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__UnlockStakeEvent {
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_unlocked: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__VoteDelegation {
    pub voter: Address,
    pub pending_voter: Address,
    pub last_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__VoteEvent {
    pub voter: Address,
    pub proposal_id: U64,
    pub delegation_pool: Address,
    pub num_votes: U64,
    pub should_pass: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__VotingRecordKey {
    pub voter: Address,
    pub proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__delegation_pool__WithdrawStakeEvent {
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_withdrawn: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ed25519__Signature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ed25519__SignedMessage {
    pub type_info: _0x1__type_info__TypeInfo,
    pub inner: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ed25519__UnvalidatedPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ed25519__ValidatedPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__event__EventHandle {
    pub counter: U64,
    pub guid: _0x1__guid__GUID,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__execution_config__ExecutionConfig {
    pub config: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__features__Features {
    pub features: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fixed_point32__FixedPoint32 {
    pub value: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fixed_point64__FixedPoint64 {
    pub value: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__BurnRef {
    pub metadata: _0x1__object__Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__DepositEvent {
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__FrozenEvent {
    pub frozen: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__FungibleAsset {
    pub metadata: _0x1__object__Object,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__FungibleAssetEvents {
    pub deposit_events: _0x1__event__EventHandle,
    pub withdraw_events: _0x1__event__EventHandle,
    pub frozen_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__FungibleStore {
    pub metadata: _0x1__object__Object,
    pub balance: U64,
    pub frozen: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__Metadata {
    pub name: String,
    pub symbol: String,
    pub decimals: U8,
    pub icon_uri: String,
    pub project_uri: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__MintRef {
    pub metadata: _0x1__object__Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__Supply {
    pub current: U128,
    pub maximum: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__TransferRef {
    pub metadata: _0x1__object__Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__fungible_asset__WithdrawEvent {
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__gas_schedule__GasEntry {
    pub key: String,
    pub val: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__gas_schedule__GasSchedule {
    pub entries: Vec<_0x1__gas_schedule__GasEntry>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__gas_schedule__GasScheduleV2 {
    pub feature_version: U64,
    pub entries: Vec<_0x1__gas_schedule__GasEntry>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__genesis__AccountMap {
    pub account_address: Address,
    pub balance: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__genesis__EmployeeAccountMap {
    pub accounts: Vec<Address>,
    pub validator: _0x1__genesis__ValidatorConfigurationWithCommission,
    pub vesting_schedule_numerator: Vec<U64>,
    pub vesting_schedule_denominator: U64,
    pub beneficiary_resetter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__genesis__ValidatorConfiguration {
    pub owner_address: Address,
    pub operator_address: Address,
    pub voter_address: Address,
    pub stake_amount: U64,
    pub consensus_pubkey: Vec<U8>,
    pub proof_of_possession: Vec<U8>,
    pub network_addresses: Vec<U8>,
    pub full_node_network_addresses: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__genesis__ValidatorConfigurationWithCommission {
    pub validator_config: _0x1__genesis__ValidatorConfiguration,
    pub commission_percentage: U64,
    pub join_during_genesis: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__governance_proposal__GovernanceProposal {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__guid__GUID {
    pub id: _0x1__guid__ID,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__guid__ID {
    pub creation_num: U64,
    pub addr: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__managed_coin__Capabilities {
    pub burn_cap: _0x1__coin__BurnCapability,
    pub freeze_cap: _0x1__coin__FreezeCapability,
    pub mint_cap: _0x1__coin__MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multi_ed25519__Signature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multi_ed25519__UnvalidatedPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multi_ed25519__ValidatedPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__AddOwnersEvent {
    pub owners_added: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__CreateTransactionEvent {
    pub creator: Address,
    pub sequence_number: U64,
    pub transaction: _0x1__multisig_account__MultisigTransaction,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__ExecuteRejectedTransactionEvent {
    pub sequence_number: U64,
    pub num_rejections: U64,
    pub executor: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__ExecutionError {
    pub abort_location: String,
    pub error_type: String,
    pub error_code: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__MetadataUpdatedEvent {
    pub old_metadata: _0x1__simple_map__SimpleMap,
    pub new_metadata: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__MultisigAccount {
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
    pub transactions: _0x1__table__Table,
    pub last_executed_sequence_number: U64,
    pub next_sequence_number: U64,
    pub signer_cap: _0x1__option__Option,
    pub metadata: _0x1__simple_map__SimpleMap,
    pub add_owners_events: _0x1__event__EventHandle,
    pub remove_owners_events: _0x1__event__EventHandle,
    pub update_signature_required_events: _0x1__event__EventHandle,
    pub create_transaction_events: _0x1__event__EventHandle,
    pub vote_events: _0x1__event__EventHandle,
    pub execute_rejected_transaction_events: _0x1__event__EventHandle,
    pub execute_transaction_events: _0x1__event__EventHandle,
    pub transaction_execution_failed_events: _0x1__event__EventHandle,
    pub metadata_updated_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__MultisigAccountCreationMessage {
    pub chain_id: U8,
    pub account_address: Address,
    pub sequence_number: U64,
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__MultisigAccountCreationWithAuthKeyRevocationMessage {
    pub chain_id: U8,
    pub account_address: Address,
    pub sequence_number: U64,
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__MultisigTransaction {
    pub payload: _0x1__option__Option,
    pub payload_hash: _0x1__option__Option,
    pub votes: _0x1__simple_map__SimpleMap,
    pub creator: Address,
    pub creation_time_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__RemoveOwnersEvent {
    pub owners_removed: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__TransactionExecutionFailedEvent {
    pub executor: Address,
    pub sequence_number: U64,
    pub transaction_payload: Vec<U8>,
    pub num_approvals: U64,
    pub execution_error: _0x1__multisig_account__ExecutionError,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__TransactionExecutionSucceededEvent {
    pub executor: Address,
    pub sequence_number: U64,
    pub transaction_payload: Vec<U8>,
    pub num_approvals: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__UpdateSignaturesRequiredEvent {
    pub old_num_signatures_required: U64,
    pub new_num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__multisig_account__VoteEvent {
    pub owner: Address,
    pub sequence_number: U64,
    pub approved: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__ConstructorRef {
    #[serde(rename = "self")]
    pub self_: Address,
    pub can_delete: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__DeleteRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__DeriveRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__ExtendRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__LinearTransferRef {
    #[serde(rename = "self")]
    pub self_: Address,
    pub owner: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__Object {
    pub inner: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__ObjectCore {
    pub guid_creation_num: U64,
    pub owner: Address,
    pub allow_ungated_transfer: bool,
    pub transfer_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__ObjectGroup {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__TransferEvent {
    pub object: Address,
    pub from: Address,
    pub to: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__object__TransferRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__option__Option {
    pub vec: Vec<Any>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__optional_aggregator__Integer {
    pub value: U128,
    pub limit: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__optional_aggregator__OptionalAggregator {
    pub aggregator: _0x1__option__Option,
    pub integer: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__pool_u64__Pool {
    pub shareholders_limit: U64,
    pub total_coins: U64,
    pub total_shares: U64,
    pub shares: _0x1__simple_map__SimpleMap,
    pub shareholders: Vec<Address>,
    pub scaling_factor: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__pool_u64_unbound__Pool {
    pub total_coins: U64,
    pub total_shares: U128,
    pub shares: _0x1__table_with_length__TableWithLength,
    pub scaling_factor: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__primary_fungible_store__DeriveRefPod {
    pub metadata_derive_ref: _0x1__object__DeriveRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__reconfiguration__Configuration {
    pub epoch: U64,
    pub last_reconfiguration_time: U64,
    pub events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__reconfiguration__DisableReconfiguration {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__reconfiguration__NewEpochEvent {
    pub epoch: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__resource_account__Container {
    pub store: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255__CompressedRistretto {
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255__RistrettoPoint {
    pub handle: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255__Scalar {
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255_bulletproofs__RangeProof {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255_elgamal__Ciphertext {
    pub left: _0x1__ristretto255__RistrettoPoint,
    pub right: _0x1__ristretto255__RistrettoPoint,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255_elgamal__CompressedCiphertext {
    pub left: _0x1__ristretto255__CompressedRistretto,
    pub right: _0x1__ristretto255__CompressedRistretto,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255_elgamal__CompressedPubkey {
    pub point: _0x1__ristretto255__CompressedRistretto,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__ristretto255_pedersen__Commitment {
    pub point: _0x1__ristretto255__RistrettoPoint,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__secp256k1__ECDSARawPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__secp256k1__ECDSASignature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__simple_map__Element {
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__simple_map__SimpleMap {
    pub data: Vec<_0x1__simple_map__Element>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__smart_table__Entry {
    pub hash: U64,
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__smart_table__SmartTable {
    pub buckets: _0x1__table_with_length__TableWithLength,
    pub num_buckets: U64,
    pub level: U8,
    pub size: U64,
    pub split_load_threshold: U8,
    pub target_bucket_size: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__smart_vector__SmartVector {
    pub inline_vec: Vec<Any>,
    pub big_vec: _0x1__option__Option,
    pub inline_capacity: _0x1__option__Option,
    pub bucket_size: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__AddStakeEvent {
    pub pool_address: Address,
    pub amount_added: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__AllowedValidators {
    pub accounts: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__AptosCoinCapabilities {
    pub mint_cap: _0x1__coin__MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__DistributeRewardsEvent {
    pub pool_address: Address,
    pub rewards_amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__IncreaseLockupEvent {
    pub pool_address: Address,
    pub old_locked_until_secs: U64,
    pub new_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__IndividualValidatorPerformance {
    pub successful_proposals: U64,
    pub failed_proposals: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__JoinValidatorSetEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__LeaveValidatorSetEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__OwnerCapability {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ReactivateStakeEvent {
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__RegisterValidatorCandidateEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__RotateConsensusKeyEvent {
    pub pool_address: Address,
    pub old_consensus_pubkey: Vec<U8>,
    pub new_consensus_pubkey: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__SetOperatorEvent {
    pub pool_address: Address,
    pub old_operator: Address,
    pub new_operator: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__StakePool {
    pub active: _0x1__coin__Coin,
    pub inactive: _0x1__coin__Coin,
    pub pending_active: _0x1__coin__Coin,
    pub pending_inactive: _0x1__coin__Coin,
    pub locked_until_secs: U64,
    pub operator_address: Address,
    pub delegated_voter: Address,
    pub initialize_validator_events: _0x1__event__EventHandle,
    pub set_operator_events: _0x1__event__EventHandle,
    pub add_stake_events: _0x1__event__EventHandle,
    pub reactivate_stake_events: _0x1__event__EventHandle,
    pub rotate_consensus_key_events: _0x1__event__EventHandle,
    pub update_network_and_fullnode_addresses_events: _0x1__event__EventHandle,
    pub increase_lockup_events: _0x1__event__EventHandle,
    pub join_validator_set_events: _0x1__event__EventHandle,
    pub distribute_rewards_events: _0x1__event__EventHandle,
    pub unlock_stake_events: _0x1__event__EventHandle,
    pub withdraw_stake_events: _0x1__event__EventHandle,
    pub leave_validator_set_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__UnlockStakeEvent {
    pub pool_address: Address,
    pub amount_unlocked: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__UpdateNetworkAndFullnodeAddressesEvent {
    pub pool_address: Address,
    pub old_network_addresses: Vec<U8>,
    pub new_network_addresses: Vec<U8>,
    pub old_fullnode_addresses: Vec<U8>,
    pub new_fullnode_addresses: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ValidatorConfig {
    pub consensus_pubkey: Vec<U8>,
    pub network_addresses: Vec<U8>,
    pub fullnode_addresses: Vec<U8>,
    pub validator_index: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ValidatorFees {
    pub fees_table: _0x1__table__Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ValidatorInfo {
    pub addr: Address,
    pub voting_power: U64,
    pub config: _0x1__stake__ValidatorConfig,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ValidatorPerformance {
    pub validators: Vec<_0x1__stake__IndividualValidatorPerformance>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__ValidatorSet {
    pub consensus_scheme: U8,
    pub active_validators: Vec<_0x1__stake__ValidatorInfo>,
    pub pending_inactive: Vec<_0x1__stake__ValidatorInfo>,
    pub pending_active: Vec<_0x1__stake__ValidatorInfo>,
    pub total_voting_power: U128,
    pub total_joining_power: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__stake__WithdrawStakeEvent {
    pub pool_address: Address,
    pub amount_withdrawn: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_config__StakingConfig {
    pub minimum_stake: U64,
    pub maximum_stake: U64,
    pub recurring_lockup_duration_secs: U64,
    pub allow_validator_set_change: bool,
    pub rewards_rate: U64,
    pub rewards_rate_denominator: U64,
    pub voting_power_increase_limit: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_config__StakingRewardsConfig {
    pub rewards_rate: _0x1__fixed_point64__FixedPoint64,
    pub min_rewards_rate: _0x1__fixed_point64__FixedPoint64,
    pub rewards_rate_period_in_secs: U64,
    pub last_rewards_rate_period_start_in_secs: U64,
    pub rewards_rate_decrease_rate: _0x1__fixed_point64__FixedPoint64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__AddDistributionEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__AddStakeEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__CreateStakingContractEvent {
    pub operator: Address,
    pub voter: Address,
    pub pool_address: Address,
    pub principal: U64,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__DistributeEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub recipient: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__RequestCommissionEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub accumulated_rewards: U64,
    pub commission_amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__ResetLockupEvent {
    pub operator: Address,
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__StakingContract {
    pub principal: U64,
    pub pool_address: Address,
    pub owner_cap: _0x1__stake__OwnerCapability,
    pub commission_percentage: U64,
    pub distribution_pool: _0x1__pool_u64__Pool,
    pub signer_cap: _0x1__account__SignerCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__StakingGroupContainer {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__StakingGroupUpdateCommissionEvent {
    pub update_commission_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__Store {
    pub staking_contracts: _0x1__simple_map__SimpleMap,
    pub create_staking_contract_events: _0x1__event__EventHandle,
    pub update_voter_events: _0x1__event__EventHandle,
    pub reset_lockup_events: _0x1__event__EventHandle,
    pub add_stake_events: _0x1__event__EventHandle,
    pub request_commission_events: _0x1__event__EventHandle,
    pub unlock_stake_events: _0x1__event__EventHandle,
    pub switch_operator_events: _0x1__event__EventHandle,
    pub add_distribution_events: _0x1__event__EventHandle,
    pub distribute_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__SwitchOperatorEvent {
    pub old_operator: Address,
    pub new_operator: Address,
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__UnlockStakeEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
    pub commission_paid: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__UpdateCommissionEvent {
    pub staker: Address,
    pub operator: Address,
    pub old_commission_percentage: U64,
    pub new_commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__staking_contract__UpdateVoterEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub old_voter: Address,
    pub new_voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__state_storage__GasParameter {
    pub usage: _0x1__state_storage__Usage,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__state_storage__StateStorageUsage {
    pub epoch: U64,
    pub usage: _0x1__state_storage__Usage,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__state_storage__Usage {
    pub items: U64,
    pub bytes: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__storage_gas__GasCurve {
    pub min_gas: U64,
    pub max_gas: U64,
    pub points: Vec<_0x1__storage_gas__Point>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__storage_gas__Point {
    pub x: U64,
    pub y: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__storage_gas__StorageGas {
    pub per_item_read: U64,
    pub per_item_create: U64,
    pub per_item_write: U64,
    pub per_byte_read: U64,
    pub per_byte_create: U64,
    pub per_byte_write: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__storage_gas__StorageGasConfig {
    pub item_config: _0x1__storage_gas__UsageGasConfig,
    pub byte_config: _0x1__storage_gas__UsageGasConfig,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__storage_gas__UsageGasConfig {
    pub target_usage: U64,
    pub read_curve: _0x1__storage_gas__GasCurve,
    pub create_curve: _0x1__storage_gas__GasCurve,
    pub write_curve: _0x1__storage_gas__GasCurve,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__string__String {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__string_utils__Cons {
    pub car: Any,
    pub cdr: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__string_utils__FakeCons {
    pub car: Any,
    pub cdr: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__string_utils__NIL {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__table__Box {
    pub val: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__table__Table {
    pub handle: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__table_with_length__TableWithLength {
    pub inner: _0x1__table__Table,
    pub length: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__timestamp__CurrentTimeMicroseconds {
    pub microseconds: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__transaction_context__AUID {
    pub unique_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__transaction_fee__AptosCoinCapabilities {
    pub burn_cap: _0x1__coin__BurnCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__transaction_fee__CollectedFeesPerBlock {
    pub amount: _0x1__coin__AggregatableCoin,
    pub proposer: _0x1__option__Option,
    pub burn_percentage: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__transaction_validation__TransactionValidation {
    pub module_addr: Address,
    pub module_name: Vec<U8>,
    pub script_prologue_name: Vec<U8>,
    pub module_prologue_name: Vec<U8>,
    pub multi_agent_prologue_name: Vec<U8>,
    pub user_epilogue_name: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__type_info__TypeInfo {
    pub account_address: Address,
    pub module_name: Vec<U8>,
    pub struct_name: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__version__SetVersionCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__version__Version {
    pub major: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__AdminStore {
    pub vesting_contracts: Vec<Address>,
    pub nonce: U64,
    pub create_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__AdminWithdrawEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__CreateVestingContractEvent {
    pub operator: Address,
    pub voter: Address,
    pub grant_amount: U64,
    pub withdrawal_address: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__DistributeEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__ResetLockupEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub new_lockup_expiration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__SetBeneficiaryEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub shareholder: Address,
    pub old_beneficiary: Address,
    pub new_beneficiary: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__StakingInfo {
    pub pool_address: Address,
    pub operator: Address,
    pub voter: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__TerminateEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__UnlockRewardsEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__UpdateOperatorEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub old_operator: Address,
    pub new_operator: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__UpdateVoterEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub old_voter: Address,
    pub new_voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__VestEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub period_vested: U64,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__VestingAccountManagement {
    pub roles: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__VestingContract {
    pub state: U64,
    pub admin: Address,
    pub grant_pool: _0x1__pool_u64__Pool,
    pub beneficiaries: _0x1__simple_map__SimpleMap,
    pub vesting_schedule: _0x1__vesting__VestingSchedule,
    pub withdrawal_address: Address,
    pub staking: _0x1__vesting__StakingInfo,
    pub remaining_grant: U64,
    pub signer_cap: _0x1__account__SignerCapability,
    pub update_operator_events: _0x1__event__EventHandle,
    pub update_voter_events: _0x1__event__EventHandle,
    pub reset_lockup_events: _0x1__event__EventHandle,
    pub set_beneficiary_events: _0x1__event__EventHandle,
    pub unlock_rewards_events: _0x1__event__EventHandle,
    pub vest_events: _0x1__event__EventHandle,
    pub distribute_events: _0x1__event__EventHandle,
    pub terminate_events: _0x1__event__EventHandle,
    pub admin_withdraw_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__vesting__VestingSchedule {
    pub schedule: Vec<_0x1__fixed_point32__FixedPoint32>,
    pub start_timestamp_secs: U64,
    pub period_duration: U64,
    pub last_vested_period: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__CreateProposalEvent {
    pub proposal_id: U64,
    pub early_resolution_vote_threshold: _0x1__option__Option,
    pub execution_hash: Vec<U8>,
    pub expiration_secs: U64,
    pub metadata: _0x1__simple_map__SimpleMap,
    pub min_vote_threshold: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__Proposal {
    pub proposer: Address,
    pub execution_content: _0x1__option__Option,
    pub metadata: _0x1__simple_map__SimpleMap,
    pub creation_time_secs: U64,
    pub execution_hash: Vec<U8>,
    pub min_vote_threshold: U128,
    pub expiration_secs: U64,
    pub early_resolution_vote_threshold: _0x1__option__Option,
    pub yes_votes: U128,
    pub no_votes: U128,
    pub is_resolved: bool,
    pub resolution_time_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__RegisterForumEvent {
    pub hosting_account: Address,
    pub proposal_type_info: _0x1__type_info__TypeInfo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__ResolveProposal {
    pub proposal_id: U64,
    pub yes_votes: U128,
    pub no_votes: U128,
    pub resolved_early: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__VoteEvent {
    pub proposal_id: U64,
    pub num_votes: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__VotingEvents {
    pub create_proposal_events: _0x1__event__EventHandle,
    pub register_forum_events: _0x1__event__EventHandle,
    pub resolve_proposal_events: _0x1__event__EventHandle,
    pub vote_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x1__voting__VotingForum {
    pub proposals: _0x1__table__Table,
    pub events: _0x1__voting__VotingEvents,
    pub next_proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x3__canvas_collection__CollectionRefs {
    pub transfer_ref: _0x1__object__TransferRef,
    pub mutator_ref: _0x4__collection__MutatorRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x3__canvas_token__Canvas {
    pub config: _0x3__canvas_token__CanvasConfig,
    pub pixels: _0x1__smart_table__SmartTable,
    pub last_contribution_s: _0x1__smart_table__SmartTable,
    pub allowlisted_artists:
        _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet,
    pub blocklisted_artists:
        _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet,
    pub admins:
        _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet,
    pub created_at_s: U64,
    pub extend_ref: _0x1__object__ExtendRef,
    pub mutator_ref: _0x4__token__MutatorRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x3__canvas_token__CanvasConfig {
    pub width: U64,
    pub height: U64,
    pub per_account_timeout_s: U64,
    pub can_draw_for_s: U64,
    pub palette: Vec<_0x3__canvas_token__Color>,
    pub cost: U64,
    pub funds_recipient: _0x1__option__Option,
    pub default_color: _0x3__canvas_token__Color,
    pub owner_is_super_admin: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x3__canvas_token__Color {
    pub r: U8,
    pub g: U8,
    pub b: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__aptos_token__AptosCollection {
    pub mutator_ref: _0x1__option__Option,
    pub royalty_mutator_ref: _0x1__option__Option,
    pub mutable_description: bool,
    pub mutable_uri: bool,
    pub mutable_token_description: bool,
    pub mutable_token_name: bool,
    pub mutable_token_properties: bool,
    pub mutable_token_uri: bool,
    pub tokens_burnable_by_creator: bool,
    pub tokens_freezable_by_creator: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__aptos_token__AptosToken {
    pub burn_ref: _0x1__option__Option,
    pub transfer_ref: _0x1__option__Option,
    pub mutator_ref: _0x1__option__Option,
    pub property_mutator_ref: _0x4__property_map__MutatorRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__BurnEvent {
    pub index: U64,
    pub token: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__Collection {
    pub creator: Address,
    pub description: String,
    pub name: String,
    pub uri: String,
    pub mutation_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__FixedSupply {
    pub current_supply: U64,
    pub max_supply: U64,
    pub total_minted: U64,
    pub burn_events: _0x1__event__EventHandle,
    pub mint_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__MintEvent {
    pub index: U64,
    pub token: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__MutationEvent {
    pub mutated_field_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__MutatorRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__collection__UnlimitedSupply {
    pub current_supply: U64,
    pub total_minted: U64,
    pub burn_events: _0x1__event__EventHandle,
    pub mint_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__property_map__MutatorRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__property_map__PropertyMap {
    pub inner: _0x1__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__property_map__PropertyValue {
    pub r#type: U8,
    pub value: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__royalty__MutatorRef {
    pub inner: _0x1__object__ExtendRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__royalty__Royalty {
    pub numerator: U64,
    pub denominator: U64,
    pub payee_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__token__BurnRef {
    pub inner: _0x1__option__Option,
    #[serde(rename = "self")]
    pub self_: _0x1__option__Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__token__MutationEvent {
    pub mutated_field_name: String,
    pub old_value: String,
    pub new_value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__token__MutatorRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x4__token__Token {
    pub collection: _0x1__object__Object,
    pub index: U64,
    pub description: String,
    pub name: String,
    pub uri: String,
    pub mutation_events: _0x1__event__EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element
{
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__SimpleMap
{
    pub data: Vec<
        _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element,
    >,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_set__SimpleSet
{
    pub data: Vec<Any>,
}
