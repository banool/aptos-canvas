// DO NOT EDIT THIS FILE
// This file was generated by https://github.com/tacogips/async-graphql-reverse
use aptos_move_graphql_scalars::*;
use serde::{Deserialize, Serialize};
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ACL {
    pub list: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AUID {
    pub unique_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Account {
    pub authentication_key: Vec<U8>,
    pub sequence_number: U64,
    pub guid_creation_num: U64,
    pub coin_register_events: EventHandle,
    pub key_rotation_events: EventHandle,
    pub rotation_capability_offer: CapabilityOffer,
    pub signer_capability_offer: CapabilityOffer,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AccountMap {
    pub account_address: Address,
    pub balance: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AddDistributionEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AddOwnersEvent {
    pub owners_added: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AdminStore {
    pub vesting_contracts: Vec<Address>,
    pub nonce: U64,
    pub create_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AdminWithdrawEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AggrOrMultiSignature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AggrPublicKeysWithPoP {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AggregatableCoin {
    pub value: Aggregator,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Aggregator {
    pub handle: Address,
    pub key: Address,
    pub limit: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AggregatorFactory {
    pub phantom_table: Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AllowedDep {
    pub account: Address,
    pub module_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AllowedValidators {
    pub accounts: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ApprovedExecutionHashes {
    pub hashes:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AptosCoin {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AptosCollection {
    pub mutator_ref: Option,
    pub royalty_mutator_ref: Option,
    pub mutable_description: bool,
    pub mutable_uri: bool,
    pub mutable_token_description: bool,
    pub mutable_token_name: bool,
    pub mutable_token_properties: bool,
    pub mutable_token_uri: bool,
    pub tokens_burnable_by_creator: bool,
    pub tokens_freezable_by_creator: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AptosToken { pub burn_ref : Option , pub transfer_ref : Option , pub mutator_ref : Option , pub property_mutator_ref : _0x0000000000000000000000000000000000000000000000000000000000000004__property_map__MutatorRef }
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BigVector {
    pub buckets: TableWithLength,
    pub end_index: U64,
    pub bucket_size: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BitVector {
    pub length: U64,
    pub bit_field: Vec<bool>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BlockResource {
    pub height: U64,
    pub epoch_interval: U64,
    pub new_block_events: EventHandle,
    pub update_epoch_interval_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Box {
    pub val: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BurnCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct BurnEvent {
    pub index: U64,
    pub token: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Canvas {
    pub config: CanvasConfig,
    pub pixels: SmartTable,
    pub last_contribution_s: SmartTable,
    pub allowlisted_artists: SimpleSet,
    pub blocklisted_artists: SimpleSet,
    pub admins: SimpleSet,
    pub created_at_s: U64,
    pub extend_ref: ExtendRef,
    pub mutator_ref:
        _0x0000000000000000000000000000000000000000000000000000000000000004__token__MutatorRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CanvasConfig {
    pub width: U64,
    pub height: U64,
    pub per_account_timeout_s: U64,
    pub can_draw_for_s: U64,
    pub palette: Vec<Color>,
    pub cost: U64,
    pub funds_recipient: Option,
    pub default_color: Color,
    pub owner_is_super_admin: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Cap {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CapDelegateState {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CapState {
    pub delegates: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Capabilities {
    pub burn_cap: BurnCapability,
    pub freeze_cap: FreezeCapability,
    pub mint_cap: MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CapabilityOffer {
    pub r#for: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ChainId {
    pub id: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Ciphertext {
    pub left: RistrettoPoint,
    pub right: RistrettoPoint,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Coin {
    pub value: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CoinInfo {
    pub name: String,
    pub symbol: String,
    pub decimals: U8,
    pub supply: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CoinRegisterEvent {
    pub type_info: TypeInfo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CoinStore {
    pub coin: Coin,
    pub frozen: bool,
    pub deposit_events: EventHandle,
    pub withdraw_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CollectedFeesPerBlock {
    pub amount: AggregatableCoin,
    pub proposer: Option,
    pub burn_percentage: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Collection {
    pub creator: Address,
    pub description: String,
    pub name: String,
    pub uri: String,
    pub mutation_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CollectionRefs {
    pub transfer_ref:
        _0x0000000000000000000000000000000000000000000000000000000000000001__object__TransferRef,
    pub mutator_ref:
        _0x0000000000000000000000000000000000000000000000000000000000000004__collection__MutatorRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Color {
    pub r: U8,
    pub g: U8,
    pub b: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Commitment {
    pub point: RistrettoPoint,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CompressedCiphertext {
    pub left: CompressedRistretto,
    pub right: CompressedRistretto,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CompressedPubkey {
    pub point: CompressedRistretto,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CompressedRistretto {
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Configuration {
    pub epoch: U64,
    pub last_reconfiguration_time: U64,
    pub events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Cons {
    pub car: Any,
    pub cdr: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ConsensusConfig {
    pub config: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ConstructorRef {
    #[serde(rename = "self")]
    pub self_: Address,
    pub can_delete: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Container {
    pub store:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateStakingContractEvent {
    pub operator: Address,
    pub voter: Address,
    pub pool_address: Address,
    pub principal: U64,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateTransactionEvent {
    pub creator: Address,
    pub sequence_number: U64,
    pub transaction: MultisigTransaction,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CreateVestingContractEvent {
    pub operator: Address,
    pub voter: Address,
    pub grant_amount: U64,
    pub withdrawal_address: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CurrentTimeMicroseconds {
    pub microseconds: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DelegateVotingPowerEvent {
    pub pool_address: Address,
    pub delegator: Address,
    pub voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DelegatedMintCapability {
    pub to: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DelegatedVotes {
    pub active_shares: U128,
    pub pending_inactive_shares: U128,
    pub active_shares_next_lockup: U128,
    pub last_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DelegationPool {
    pub active_shares:
        _0x0000000000000000000000000000000000000000000000000000000000000001__pool_u64_unbound__Pool,
    pub observed_lockup_cycle: ObservedLockupCycle,
    pub inactive_shares: Table,
    pub pending_withdrawals: Table,
    pub stake_pool_signer_cap: SignerCapability,
    pub total_coins_inactive: U64,
    pub operator_commission_percentage: U64,
    pub add_stake_events: EventHandle,
    pub reactivate_stake_events: EventHandle,
    pub unlock_stake_events: EventHandle,
    pub withdraw_stake_events: EventHandle,
    pub distribute_commission_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DelegationPoolOwnership {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Delegations {
    pub inner: Vec<DelegatedMintCapability>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeleteRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeriveRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DeriveRefPod {
    pub metadata_derive_ref: DeriveRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DirectCoinTransferConfigUpdatedEvent {
    pub new_allow_direct_transfers: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DirectTransferConfig {
    pub allow_arbitrary_coin_transfers: bool,
    pub update_coin_transfer_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DisableReconfiguration {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DistributeCommissionEvent {
    pub pool_address: Address,
    pub operator: Address,
    pub commission_active: U64,
    pub commission_pending_inactive: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DistributeRewardsEvent {
    pub pool_address: Address,
    pub rewards_amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ECDSARawPublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ECDSASignature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct EmployeeAccountMap {
    pub accounts: Vec<Address>,
    pub validator: ValidatorConfigurationWithCommission,
    pub vesting_schedule_numerator: Vec<U64>,
    pub vesting_schedule_denominator: U64,
    pub beneficiary_resetter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Entry {
    pub hash: U64,
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct EventHandle {
    pub counter: U64,
    pub guid: GUID,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExecuteRejectedTransactionEvent {
    pub sequence_number: U64,
    pub num_rejections: U64,
    pub executor: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExecutionConfig {
    pub config: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExecutionError {
    pub abort_location: String,
    pub error_type: String,
    pub error_code: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ExtendRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FakeCons {
    pub car: Any,
    pub cdr: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Features {
    pub features: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FixedPoint32 {
    pub value: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FixedPoint64 {
    pub value: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FixedSupply {
    pub current_supply: U64,
    pub max_supply: U64,
    pub total_minted: U64,
    pub burn_events: EventHandle,
    pub mint_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatFq12LscLsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatFrLsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatFrMsb {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatG1Compr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatG1Uncompr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatG2Compr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatG2Uncompr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FormatGt {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Fq12 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Fr {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FreezeCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FrozenEvent {
    pub frozen: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FungibleAsset {
    pub metadata: Object,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FungibleAssetEvents {
    pub deposit_events: EventHandle,
    pub withdraw_events: EventHandle,
    pub frozen_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FungibleStore {
    pub metadata: Object,
    pub balance: U64,
    pub frozen: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct G1 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct G2 {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GUID {
    pub id: _0x0000000000000000000000000000000000000000000000000000000000000001__guid__ID,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GasCurve {
    pub min_gas: U64,
    pub max_gas: U64,
    pub points: Vec<Point>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GasEntry {
    pub key: String,
    pub val: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GasParameter {
    pub usage: Usage,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GasSchedule {
    pub entries: Vec<GasEntry>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GasScheduleV2 {
    pub feature_version: U64,
    pub entries: Vec<GasEntry>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GenesisEndMarker {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GovernanceConfig {
    pub min_voting_threshold: U128,
    pub required_proposer_stake: U64,
    pub voting_duration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GovernanceEvents {
    pub create_proposal_events: EventHandle,
    pub update_config_events: EventHandle,
    pub vote_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GovernanceProposal {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GovernanceRecords {
    pub votes: SmartTable,
    pub votes_per_proposal: SmartTable,
    pub vote_delegation: SmartTable,
    pub delegated_votes: SmartTable,
    pub vote_events: EventHandle,
    pub create_proposal_events: EventHandle,
    pub delegate_voting_power_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct GovernanceResponsbility {
    pub signer_caps:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Gt {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct HashG1XmdSha256SswuRo {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct HashG2XmdSha256SswuRo {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IncreaseLockupEvent {
    pub pool_address: Address,
    pub old_locked_until_secs: U64,
    pub new_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct IndividualValidatorPerformance {
    pub successful_proposals: U64,
    pub failed_proposals: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Integer {
    pub value: U128,
    pub limit: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct JoinValidatorSetEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct KeyRotationEvent {
    pub old_authentication_key: Vec<U8>,
    pub new_authentication_key: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LeaveValidatorSetEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LinearCap {
    pub root: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LinearTransferRef {
    #[serde(rename = "self")]
    pub self_: Address,
    pub owner: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Metadata {
    pub name: String,
    pub symbol: String,
    pub decimals: U8,
    pub icon_uri: String,
    pub project_uri: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MetadataUpdatedEvent {
    pub old_metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub new_metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MintCapStore {
    pub mint_cap: MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MintCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MintEvent {
    pub index: U64,
    pub token: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MintRef {
    pub metadata: Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ModuleMetadata {
    pub name: String,
    pub source: Vec<U8>,
    pub source_map: Vec<U8>,
    pub extension: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MultisigAccount {
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
    pub transactions: Table,
    pub last_executed_sequence_number: U64,
    pub next_sequence_number: U64,
    pub signer_cap: Option,
    pub metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub add_owners_events: EventHandle,
    pub remove_owners_events: EventHandle,
    pub update_signature_required_events: EventHandle,
    pub create_transaction_events: EventHandle,
    pub vote_events: EventHandle,
    pub execute_rejected_transaction_events: EventHandle,
    pub execute_transaction_events: EventHandle,
    pub transaction_execution_failed_events: EventHandle,
    pub metadata_updated_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MultisigAccountCreationMessage {
    pub chain_id: U8,
    pub account_address: Address,
    pub sequence_number: U64,
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MultisigAccountCreationWithAuthKeyRevocationMessage {
    pub chain_id: U8,
    pub account_address: Address,
    pub sequence_number: U64,
    pub owners: Vec<Address>,
    pub num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MultisigTransaction {
    pub payload: Option,
    pub payload_hash: Option,
    pub votes:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub creator: Address,
    pub creation_time_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NIL {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NewBlockEvent {
    pub hash: Address,
    pub epoch: U64,
    pub round: U64,
    pub height: U64,
    pub previous_block_votes_bitvec: Vec<U8>,
    pub proposer: Address,
    pub failed_proposer_indices: Vec<U64>,
    pub time_microseconds: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct NewEpochEvent {
    pub epoch: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Object {
    pub inner: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ObjectCore {
    pub guid_creation_num: U64,
    pub owner: Address,
    pub allow_ungated_transfer: bool,
    pub transfer_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ObjectGroup {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ObservedLockupCycle {
    pub index: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Option {
    pub vec: Vec<Any>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OptionalAggregator {
    pub aggregator: Option,
    pub integer: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OriginatingAddress {
    pub address_map: Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct OwnerCapability {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageDep {
    pub account: Address,
    pub package_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageMetadata {
    pub name: String,
    pub upgrade_policy: UpgradePolicy,
    pub upgrade_number: U64,
    pub source_digest: String,
    pub manifest: Vec<U8>,
    pub modules: Vec<ModuleMetadata>,
    pub deps: Vec<PackageDep>,
    pub extension: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PackageRegistry {
    pub packages: Vec<PackageMetadata>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Point {
    pub x: U64,
    pub y: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ProofOfPossession {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PropertyMap {
    pub inner:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PropertyValue {
    pub r#type: U8,
    pub value: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Proposal {
    pub proposer: Address,
    pub execution_content: Option,
    pub metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub creation_time_secs: U64,
    pub execution_hash: Vec<U8>,
    pub min_vote_threshold: U128,
    pub expiration_secs: U64,
    pub early_resolution_vote_threshold: Option,
    pub yes_votes: U128,
    pub no_votes: U128,
    pub is_resolved: bool,
    pub resolution_time_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PublicKey {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PublicKeyWithPoP {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RangeProof {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RecordKey {
    pub stake_pool: Address,
    pub proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RegisterForumEvent {
    pub hosting_account: Address,
    pub proposal_type_info: TypeInfo,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RegisterValidatorCandidateEvent {
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RemoveOwnersEvent {
    pub owners_removed: Vec<Address>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RequestCommissionEvent {
    pub operator: Address,
    pub pool_address: Address,
    pub accumulated_rewards: U64,
    pub commission_amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ResolveProposal {
    pub proposal_id: U64,
    pub yes_votes: U128,
    pub no_votes: U128,
    pub resolved_early: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Result {
    pub inner: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RistrettoPoint {
    pub handle: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotateConsensusKeyEvent {
    pub pool_address: Address,
    pub old_consensus_pubkey: Vec<U8>,
    pub new_consensus_pubkey: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotationCapability {
    pub account: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotationCapabilityOfferProofChallenge {
    pub sequence_number: U64,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotationCapabilityOfferProofChallengeV2 {
    pub chain_id: U8,
    pub sequence_number: U64,
    pub source_address: Address,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct RotationProofChallenge {
    pub sequence_number: U64,
    pub originator: Address,
    pub current_auth_key: Address,
    pub new_public_key: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Royalty {
    pub numerator: U64,
    pub denominator: U64,
    pub payee_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Scalar {
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SetBeneficiaryEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub shareholder: Address,
    pub old_beneficiary: Address,
    pub new_beneficiary: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SetOperatorEvent {
    pub pool_address: Address,
    pub old_operator: Address,
    pub new_operator: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SetVersionCapability {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SignedMessage {
    pub type_info: TypeInfo,
    pub inner: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SignerCapability {
    pub account: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SignerCapabilityOfferProofChallenge {
    pub sequence_number: U64,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SignerCapabilityOfferProofChallengeV2 {
    pub sequence_number: U64,
    pub source_address: Address,
    pub recipient_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SimpleSet {
    pub data: Vec<Any>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SmartTable {
    pub buckets: TableWithLength,
    pub num_buckets: U64,
    pub level: U8,
    pub size: U64,
    pub split_load_threshold: U8,
    pub target_bucket_size: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SmartVector {
    pub inline_vec: Vec<Any>,
    pub big_vec: Option,
    pub inline_capacity: Option,
    pub bucket_size: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakePool {
    pub active: Coin,
    pub inactive: Coin,
    pub pending_active: Coin,
    pub pending_inactive: Coin,
    pub locked_until_secs: U64,
    pub operator_address: Address,
    pub delegated_voter: Address,
    pub initialize_validator_events: EventHandle,
    pub set_operator_events: EventHandle,
    pub add_stake_events: EventHandle,
    pub reactivate_stake_events: EventHandle,
    pub rotate_consensus_key_events: EventHandle,
    pub update_network_and_fullnode_addresses_events: EventHandle,
    pub increase_lockup_events: EventHandle,
    pub join_validator_set_events: EventHandle,
    pub distribute_rewards_events: EventHandle,
    pub unlock_stake_events: EventHandle,
    pub withdraw_stake_events: EventHandle,
    pub leave_validator_set_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingConfig {
    pub minimum_stake: U64,
    pub maximum_stake: U64,
    pub recurring_lockup_duration_secs: U64,
    pub allow_validator_set_change: bool,
    pub rewards_rate: U64,
    pub rewards_rate_denominator: U64,
    pub voting_power_increase_limit: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingContract {
    pub principal: U64,
    pub pool_address: Address,
    pub owner_cap: OwnerCapability,
    pub commission_percentage: U64,
    pub distribution_pool:
        _0x0000000000000000000000000000000000000000000000000000000000000001__pool_u64__Pool,
    pub signer_cap: SignerCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingGroupContainer {
    pub dummy_field: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingGroupUpdateCommissionEvent {
    pub update_commission_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingInfo {
    pub pool_address: Address,
    pub operator: Address,
    pub voter: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StakingRewardsConfig {
    pub rewards_rate: FixedPoint64,
    pub min_rewards_rate: FixedPoint64,
    pub rewards_rate_period_in_secs: U64,
    pub last_rewards_rate_period_start_in_secs: U64,
    pub rewards_rate_decrease_rate: FixedPoint64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StateStorageUsage {
    pub epoch: U64,
    pub usage: Usage,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StorageGas {
    pub per_item_read: U64,
    pub per_item_create: U64,
    pub per_item_write: U64,
    pub per_byte_read: U64,
    pub per_byte_create: U64,
    pub per_byte_write: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct StorageGasConfig {
    pub item_config: UsageGasConfig,
    pub byte_config: UsageGasConfig,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Store {
    pub staking_contracts:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub create_staking_contract_events: EventHandle,
    pub update_voter_events: EventHandle,
    pub reset_lockup_events: EventHandle,
    pub add_stake_events: EventHandle,
    pub request_commission_events: EventHandle,
    pub unlock_stake_events: EventHandle,
    pub switch_operator_events: EventHandle,
    pub add_distribution_events: EventHandle,
    pub distribute_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Supply {
    pub current: U128,
    pub maximum: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SupplyConfig {
    pub allow_upgrades: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SwitchOperatorEvent {
    pub old_operator: Address,
    pub new_operator: Address,
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Table {
    pub handle: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TableWithLength {
    pub inner: Table,
    pub length: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TerminateEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Token {
    pub collection: Object,
    pub index: U64,
    pub description: String,
    pub name: String,
    pub uri: String,
    pub mutation_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TransactionExecutionFailedEvent {
    pub executor: Address,
    pub sequence_number: U64,
    pub transaction_payload: Vec<U8>,
    pub num_approvals: U64,
    pub execution_error: ExecutionError,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TransactionExecutionSucceededEvent {
    pub executor: Address,
    pub sequence_number: U64,
    pub transaction_payload: Vec<U8>,
    pub num_approvals: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TransactionValidation {
    pub module_addr: Address,
    pub module_name: Vec<U8>,
    pub script_prologue_name: Vec<U8>,
    pub module_prologue_name: Vec<U8>,
    pub multi_agent_prologue_name: Vec<U8>,
    pub user_epilogue_name: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TransferEvent {
    pub object: Address,
    pub from: Address,
    pub to: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct TypeInfo {
    pub account_address: Address,
    pub module_name: Vec<U8>,
    pub struct_name: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UnlimitedSupply {
    pub current_supply: U64,
    pub total_minted: U64,
    pub burn_events: EventHandle,
    pub mint_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UnlockRewardsEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateCommissionEvent {
    pub staker: Address,
    pub operator: Address,
    pub old_commission_percentage: U64,
    pub new_commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateConfigEvent {
    pub min_voting_threshold: U128,
    pub required_proposer_stake: U64,
    pub voting_duration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateEpochIntervalEvent {
    pub old_epoch_interval: U64,
    pub new_epoch_interval: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateNetworkAndFullnodeAddressesEvent {
    pub pool_address: Address,
    pub old_network_addresses: Vec<U8>,
    pub new_network_addresses: Vec<U8>,
    pub old_fullnode_addresses: Vec<U8>,
    pub new_fullnode_addresses: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateOperatorEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub old_operator: Address,
    pub new_operator: Address,
    pub commission_percentage: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpdateSignaturesRequiredEvent {
    pub old_num_signatures_required: U64,
    pub new_num_signatures_required: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UpgradePolicy {
    pub policy: U8,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Usage {
    pub items: U64,
    pub bytes: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct UsageGasConfig {
    pub target_usage: U64,
    pub read_curve: GasCurve,
    pub create_curve: GasCurve,
    pub write_curve: GasCurve,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorConfig {
    pub consensus_pubkey: Vec<U8>,
    pub network_addresses: Vec<U8>,
    pub fullnode_addresses: Vec<U8>,
    pub validator_index: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorConfiguration {
    pub owner_address: Address,
    pub operator_address: Address,
    pub voter_address: Address,
    pub stake_amount: U64,
    pub consensus_pubkey: Vec<U8>,
    pub proof_of_possession: Vec<U8>,
    pub network_addresses: Vec<U8>,
    pub full_node_network_addresses: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorConfigurationWithCommission {
    pub validator_config: ValidatorConfiguration,
    pub commission_percentage: U64,
    pub join_during_genesis: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorFees {
    pub fees_table: Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorInfo {
    pub addr: Address,
    pub voting_power: U64,
    pub config: ValidatorConfig,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorPerformance {
    pub validators: Vec<IndividualValidatorPerformance>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ValidatorSet {
    pub consensus_scheme: U8,
    pub active_validators: Vec<ValidatorInfo>,
    pub pending_inactive: Vec<ValidatorInfo>,
    pub pending_active: Vec<ValidatorInfo>,
    pub total_voting_power: U128,
    pub total_joining_power: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Version {
    pub major: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VestEvent {
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub period_vested: U64,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VestingAccountManagement {
    pub roles:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VestingContract {
    pub state: U64,
    pub admin: Address,
    pub grant_pool:
        _0x0000000000000000000000000000000000000000000000000000000000000001__pool_u64__Pool,
    pub beneficiaries:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub vesting_schedule: VestingSchedule,
    pub withdrawal_address: Address,
    pub staking: StakingInfo,
    pub remaining_grant: U64,
    pub signer_cap: SignerCapability,
    pub update_operator_events: EventHandle,
    pub update_voter_events: EventHandle,
    pub reset_lockup_events: EventHandle,
    pub set_beneficiary_events: EventHandle,
    pub unlock_rewards_events: EventHandle,
    pub vest_events: EventHandle,
    pub distribute_events: EventHandle,
    pub terminate_events: EventHandle,
    pub admin_withdraw_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VestingSchedule {
    pub schedule: Vec<FixedPoint32>,
    pub start_timestamp_secs: U64,
    pub period_duration: U64,
    pub last_vested_period: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VoteDelegation {
    pub voter: Address,
    pub pending_voter: Address,
    pub last_locked_until_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VotingEvents {
    pub create_proposal_events: EventHandle,
    pub register_forum_events: EventHandle,
    pub resolve_proposal_events: EventHandle,
    pub vote_events: EventHandle,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VotingForum {
    pub proposals: Table,
    pub events: VotingEvents,
    pub next_proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VotingRecordKey {
    pub voter: Address,
    pub proposal_id: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VotingRecords {
    pub votes: Table,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VotingRecordsV2 {
    pub votes: SmartTable,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__any__Any {
    pub type_name: String,
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__aptos_governance__CreateProposalEvent
{
    pub proposer: Address,
    pub stake_pool: Address,
    pub proposal_id: U64,
    pub execution_hash: Vec<U8>,
    pub proposal_metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__aptos_governance__VoteEvent
{
    pub proposal_id: U64,
    pub voter: Address,
    pub stake_pool: Address,
    pub num_votes: U64,
    pub should_pass: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__bls12381__Signature
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__coin__DepositEvent {
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__coin__WithdrawEvent
{
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__copyable_any__Any {
    pub type_name: String,
    pub data: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__crypto_algebra__Element
{
    pub handle: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__AddStakeEvent
{
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_added: U64,
    pub add_stake_fee: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__CreateProposalEvent
{
    pub proposal_id: U64,
    pub voter: Address,
    pub delegation_pool: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__ReactivateStakeEvent
{
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_reactivated: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__UnlockStakeEvent
{
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_unlocked: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__VoteEvent
{
    pub voter: Address,
    pub proposal_id: U64,
    pub delegation_pool: Address,
    pub num_votes: U64,
    pub should_pass: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__delegation_pool__WithdrawStakeEvent
{
    pub pool_address: Address,
    pub delegator_address: Address,
    pub amount_withdrawn: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__ed25519__Signature {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__ed25519__UnvalidatedPublicKey
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__ed25519__ValidatedPublicKey
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__fungible_asset__BurnRef
{
    pub metadata: Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__fungible_asset__DepositEvent
{
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__fungible_asset__TransferRef
{
    pub metadata: Object,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__fungible_asset__WithdrawEvent
{
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__guid__ID {
    pub creation_num: U64,
    pub addr: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__multi_ed25519__Signature
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__multi_ed25519__UnvalidatedPublicKey
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__multi_ed25519__ValidatedPublicKey
{
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__multisig_account__VoteEvent
{
    pub owner: Address,
    pub sequence_number: U64,
    pub approved: bool,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__object__TransferRef
{
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__pool_u64__Pool {
    pub shareholders_limit: U64,
    pub total_coins: U64,
    pub total_shares: U64,
    pub shares:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub shareholders: Vec<Address>,
    pub scaling_factor: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__pool_u64_unbound__Pool
{
    pub total_coins: U64,
    pub total_shares: U128,
    pub shares: TableWithLength,
    pub scaling_factor: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__Element
{
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap
{
    pub data: Vec<
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__Element,
    >,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__stake__AddStakeEvent
{
    pub pool_address: Address,
    pub amount_added: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__stake__AptosCoinCapabilities
{
    pub mint_cap: MintCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__stake__ReactivateStakeEvent
{
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__stake__UnlockStakeEvent
{
    pub pool_address: Address,
    pub amount_unlocked: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__stake__WithdrawStakeEvent
{
    pub pool_address: Address,
    pub amount_withdrawn: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__staking_contract__AddStakeEvent
{
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__staking_contract__DistributeEvent
{
    pub operator: Address,
    pub pool_address: Address,
    pub recipient: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__staking_contract__ResetLockupEvent
{
    pub operator: Address,
    pub pool_address: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__staking_contract__UnlockStakeEvent
{
    pub operator: Address,
    pub pool_address: Address,
    pub amount: U64,
    pub commission_paid: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__staking_contract__UpdateVoterEvent
{
    pub operator: Address,
    pub pool_address: Address,
    pub old_voter: Address,
    pub new_voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__string__String {
    pub bytes: Vec<U8>,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__transaction_fee__AptosCoinCapabilities
{
    pub burn_cap: BurnCapability,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__vesting__DistributeEvent
{
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub amount: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__vesting__ResetLockupEvent
{
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub new_lockup_expiration_secs: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__vesting__UpdateVoterEvent
{
    pub admin: Address,
    pub vesting_contract_address: Address,
    pub staking_pool_address: Address,
    pub old_voter: Address,
    pub new_voter: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__voting__CreateProposalEvent
{
    pub proposal_id: U64,
    pub early_resolution_vote_threshold: Option,
    pub execution_hash: Vec<U8>,
    pub expiration_secs: U64,
    pub metadata:
        _0x0000000000000000000000000000000000000000000000000000000000000001__simple_map__SimpleMap,
    pub min_vote_threshold: U128,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000001__voting__VoteEvent {
    pub proposal_id: U64,
    pub num_votes: U64,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__collection__MutationEvent
{
    pub mutated_field_name: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__collection__MutatorRef
{
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__property_map__MutatorRef
{
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__royalty__MutatorRef
{
    pub inner: ExtendRef,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__token__BurnRef {
    pub inner: Option,
    #[serde(rename = "self")]
    pub self_: Option,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__token__MutationEvent
{
    pub mutated_field_name: String,
    pub old_value: String,
    pub new_value: String,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x0000000000000000000000000000000000000000000000000000000000000004__token__MutatorRef {
    #[serde(rename = "self")]
    pub self_: Address,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element
{
    pub key: Any,
    pub value: Any,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__SimpleMap
{
    pub data: Vec<
        _0x626b96faa14f38242ec223e214101791920325665f4f7fc25f8865d6338b0053__simple_map__Element,
    >,
}
